// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int      @id @default(autoincrement())
  username  String   @db.VarChar(65)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  contact   String   @db.VarChar(65)
  role      String   @db.VarChar(65)
  statut    Boolean  @default(true)
  paysId    Int
  pays      Pays     @relation("pays_users", fields: [paysId], references: [paysId], onDelete: Cascade, onUpdate: Cascade)
  lienphoto String?  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banque {
  banqueId      Int        @id @default(autoincrement())
  banqueCode    String     @unique @db.VarChar(8)
  libelleBanque String     @db.VarChar(255)
  sigleBanque   String     @db.VarChar(65)
  contactBanque String     @db.VarChar(65)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  bailleurs     Bailleur[] @relation("banque_bailleurs")
  paysId        Int
  pays          Pays       @relation("pays_baques", fields: [paysId], references: [paysId], onDelete: Cascade, onUpdate: Cascade)
}

model Bailleur {
  bailleurId              Int         @id @default(autoincrement())
  bailleurNomPrenoms      String      @db.VarChar(255)
  bailleurTelephone       String      @unique @db.VarChar(65)
  bailleurAdresse         String      @db.Text
  bailleurEmail           String      @unique @db.VarChar(255)
  bailleurDateNaissance   DateTime    @db.Date
  bailleurNumero          String?     @db.VarChar(65)
  banqueId                Int
  banque                  Banque      @relation("banque_bailleurs", fields: [banqueId], references: [banqueId], onDelete: Cascade, onUpdate: Cascade)
  bailleurNumCompte       String?     @db.VarChar(65)
  bailleurRevenu          Int?
  bailleurTaux            Decimal?
  bailleurPersUrgence     String?     @db.Text
  bailleurTelUrgence      String?     @db.VarChar(65)
  bailleurRelationUrgence String?     @db.VarChar(255)
  bailleurlienCNI         String      @db.Text
  bailleurLienPhoto       String      @db.Text
  proprietes              Propriete[] @relation("bailleur_proprietes")
  locataires              Locataire[] @relation("bailleur_locataires")
}

model Propriete {
  proprieteId                Int        @id @default(autoincrement())
  proprieteCode              String     @unique @db.VarChar(65)
  proprieteAdresse           String     @db.Text
  proprieteAnnee             Int        @db.Year
  proprieteSurface           Float?     @default(0) @db.Double
  proprieteNbrEtage          Int?       @default(0)
  proprieteNbrChambre        Int?       @default(0)
  proprieteNbreSalleBain     Int?       @default(0)
  proprieteDescription       String?    @db.Text
  proprieteStatu             String     @db.VarChar(65)
  proprietePrix              Float
  proprietePret              Float?     @default(0)
  proprieteJardin            Boolean?   @default(false)
  proprietePiscine           Boolean?   @default(false)
  proprieteGarage            Boolean?   @default(false)
  proprieteBalcon            Boolean?   @default(false)
  proprieteChemine           Boolean?   @default(false)
  proprieteClimatisation     Boolean?   @default(false)
  proprieteEquipement        Boolean?   @default(false)
  proprieteequipementdetails String?    @db.Text
  proprieteLongitude         Float?     @default(0)
  proprieteLatitude          Float?     @default(0)
  proprieteQuartier          String?    @db.Text
  proprieteLienPhoto         String     @db.Text
  bailleurId                 Int
  bailleur                   Bailleur   @relation("bailleur_proprietes", fields: [bailleurId], references: [bailleurId], onDelete: Cascade, onUpdate: Cascade)
  typebienId                 Int
  typebien                   Typebien   @relation("typebien_proprietes", fields: [typebienId], references: [typebienId], onDelete: Cascade, onUpdate: Cascade)
  locataire                  Locataire?
}

model Typebien {
  typebienId      Int         @id @default(autoincrement())
  libelleTypebien String      @db.VarChar(255)
  proprietes      Propriete[] @relation("typebien_proprietes")
  biens           Bien[]      @relation("typebien_biens")
}

model Pays {
  paysId      Int      @id @default(autoincrement())
  libellePays String   @db.VarChar(255)
  codePays    String   @db.VarChar(65)
  users       User[]   @relation("pays_users")
  banques     Banque[] @relation("pays_baques")
}

model Bien {
  bienId              Int      @id @default(autoincrement())
  bienLibelle         String   @db.VarChar(225)
  bienCategorie       String   @db.VarChar(65)
  bienDescription     String   @db.Text
  bienSurface         Float?   @default(0)
  bienNbrePiece       Int?     @default(0)
  bienPrix            Int      @default(0)
  bienVille           String   @db.VarChar(65)
  bienCommuneQuartier String   @db.VarChar(65)
  bienAdresse         String   @db.VarChar(255)
  bienNomBailleur     String   @db.VarChar(255)
  bienContactBailleur String   @db.VarChar(65)
  bienContrat         String   @db.VarChar(255)
  bienImage           String   @db.VarChar(255)
  bienReference       String   @db.VarChar(65)
  typebienId          Int
  typebien            Typebien @relation("typebien_biens", fields: [typebienId], references: [typebienId], onDelete: Cascade, onUpdate: Cascade)
}

model Locataire {
  locataireId             Int       @id @default(autoincrement())
  locataireRef            String    @db.VarChar(65)
  locataireNom            String    @db.VarChar(255)
  locataireDatenais       DateTime  @db.Date
  locataireNationalite    String    @db.VarChar(65)
  locataireTel            String    @db.VarChar(65)
  locataireEmail          String    @db.VarChar(255)
  locataireSituationmatri String    @db.VarChar(255)
  locataireNbrecharge     Int?      @default(0)
  locataireTypecontrat    String?   @db.VarChar(65)
  locataireProfession     String?   @db.VarChar(255)
  locataireSalaire        Int?      @default(0)
  locataireBanque         String?   @db.VarChar(65)
  locataireNomgarant      String?   @db.VarChar(255)
  locataireTelgarant      String?   @db.VarChar(255)
  locataireEmailgarant    String?   @db.VarChar(255)
  locatairePhoto          String?   @db.VarChar(255)
  proprieteCode           String    @unique
  propriete               Propriete @relation(fields: [proprieteCode], references: [proprieteCode])
  bailleurId              Int
  bailleur                Bailleur  @relation("bailleur_locataires", fields: [bailleurId], references: [bailleurId], onDelete: Cascade, onUpdate: Cascade)
}
